{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport Connection from './connection';\nimport Publisher from './Publisher';\nimport Subscriber from './subscriber';\nimport Receiver from './Receiver';\nimport mqtt from '../frontend/node_modules/mqtt';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QosOption = /*#__PURE__*/createContext([]);\nconst qosOption = [{\n  label: '0',\n  value: 0\n}, {\n  label: '1',\n  value: 1\n}, {\n  label: '2',\n  value: 2\n}];\n\nconst HookMqtt = () => {\n  _s();\n\n  const [connectStatus, setConnectStatus] = useState('Connect');\n  const [client, setClient] = useState(() => {\n    const newPort = 8083;\n    const newHost = 'mqtttest.connio.cloud';\n    const url = `ws://${newHost}:${newPort}/mqtt`;\n    const options = {\n      keepalive: 30,\n      protocolId: 'MQTT',\n      protocolVersion: 4,\n      clean: true,\n      reconnectPeriod: 1000,\n      connectTimeout: 30 * 1000,\n      will: {\n        topic: 'WillMsg',\n        payload: 'Connection Closed abnormally..!',\n        qos: 0,\n        retain: false\n      },\n      rejectUnauthorized: false\n    };\n    options.clientId = 'digiterra-coding-task-1';\n    options.username = 'muzaffer';\n    options.password = 'muzaffer46';\n    setConnectStatus('Connecting');\n    return mqtt.connect(url, options);\n  });\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', err => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = {\n          topic,\n          message: message.toString()\n        };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  };\n\n  const mqttPublish = context => {\n    if (client) {\n      const {\n        topic,\n        qos,\n        payload\n      } = context;\n      client.publish(topic, payload, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  };\n\n  const mqttSub = subscription => {\n    if (client) {\n      const {\n        topic,\n        qos\n      } = subscription;\n      client.subscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n\n        setIsSub(true);\n      });\n    }\n  };\n\n  const mqttUnSub = subscription => {\n    if (client) {\n      const {\n        topic\n      } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n          return;\n        }\n\n        setIsSub(false);\n      });\n    }\n  };\n\n  console.log('client', client);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: client ? 'Connected' : 'Disconnected'\n  }, void 0, false);\n};\n\n_s(HookMqtt, \"3rgGurhDrdLibUkRIf3GnukyWt8=\");\n\n_c = HookMqtt;\nexport default HookMqtt;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookMqtt\");","map":{"version":3,"sources":["/home/muzaffer/Desktop/digiterra-mqtt/src/HookMqtt.js"],"names":["React","createContext","useEffect","useState","Connection","Publisher","Subscriber","Receiver","mqtt","QosOption","qosOption","label","value","HookMqtt","connectStatus","setConnectStatus","client","setClient","newPort","newHost","url","options","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","clientId","username","password","connect","isSubed","setIsSub","setPayload","mqttConnect","host","mqttOption","on","err","console","error","end","message","toString","mqttDisconnect","mqttPublish","context","publish","log","mqttSub","subscription","subscribe","mqttUnSub","unsubscribe"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport Connection from './connection'\nimport Publisher from './Publisher'\nimport Subscriber from './subscriber'\nimport Receiver from './Receiver'\nimport mqtt from '../frontend/node_modules/mqtt'\n\nexport const QosOption = createContext([])\nconst qosOption = [\n  {\n    label: '0',\n    value: 0,\n  },\n  {\n    label: '1',\n    value: 1,\n  },\n  {\n    label: '2',\n    value: 2,\n  },\n]\n\nconst HookMqtt = () => {\n  const [connectStatus, setConnectStatus] = useState('Connect')\n  const [client, setClient] = useState(() => {\n    const newPort = 8083\n    const newHost = 'mqtttest.connio.cloud'\n    const url = `ws://${newHost}:${newPort}/mqtt`\n    const options = {\n      keepalive: 30,\n      protocolId: 'MQTT',\n      protocolVersion: 4,\n      clean: true,\n      reconnectPeriod: 1000,\n      connectTimeout: 30 * 1000,\n      will: {\n        topic: 'WillMsg',\n        payload: 'Connection Closed abnormally..!',\n        qos: 0,\n        retain: false,\n      },\n      rejectUnauthorized: false,\n    }\n    options.clientId = 'digiterra-coding-task-1'\n    options.username = 'muzaffer'\n    options.password = 'muzaffer46'\n    setConnectStatus('Connecting')\n    return mqtt.connect(url, options)\n  })\n\n  const [isSubed, setIsSub] = useState(false)\n  const [payload, setPayload] = useState({})\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting')\n    setClient(mqtt.connect(host, mqttOption))\n  }\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected')\n      })\n      client.on('error', (err) => {\n        console.error('Connection error: ', err)\n        client.end()\n      })\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting')\n      })\n      client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() }\n        setPayload(payload)\n      })\n    }\n  }, [client])\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect')\n      })\n    }\n  }\n\n  const mqttPublish = (context) => {\n    if (client) {\n      const { topic, qos, payload } = context\n      client.publish(topic, payload, { qos }, (error) => {\n        if (error) {\n          console.log('Publish error: ', error)\n        }\n      })\n    }\n  }\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        setIsSub(true)\n      })\n    }\n  }\n\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic } = subscription\n      client.unsubscribe(topic, (error) => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n          return\n        }\n        setIsSub(false)\n      })\n    }\n  }\n  console.log('client', client)\n  return <>{client ? 'Connected' : 'Disconnected'}</>\n}\n\nexport default HookMqtt\n"]},"metadata":{},"sourceType":"module"}